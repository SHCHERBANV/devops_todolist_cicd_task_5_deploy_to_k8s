name: python-deployment

run-name: ${{ github.actor }} - ${{ github.ref_name }} - ${{ github.sha }}

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  PythonVersion: 3.8
  DockerImageName: todoapp

jobs:
  python-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PythonVersion }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PythonVersion }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage flake8
          pip install -r requirements.txt

      - name: Run tests
        run: python manage.py test

      - name: Generate Report
        run: |
          coverage run --source='.' manage.py test
          coverage report

      - name: Linting
        run: flake8 . --show-source --statistics --exit-zero

      - name: Check Complexity
        run: flake8 . --exit-zero --max-complexity=6

      - name: Upload python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-artifacts
          path: .

      - name: Upload helm artifacts
        uses: actions/upload-artifact@v4
        with:
          name: helm-artifacts
          path: ${{ github.workspace }}/helm-charts

  docker-ci:
    runs-on: ubuntu-latest
    needs: python-ci
    steps:
      - uses: actions/download-artifact@v4
        name: Download python artifacts
        with:
          name: python-artifacts
          path: .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          context: ./src
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DockerImageName }}:${{ github.sha }}

  helm-ci:
    runs-on: ubuntu-latest
    needs: python-ci
    steps:
      - uses: actions/download-artifact@v4
        name: Download helm artifacts
        with:
          name: helm-artifacts
          path: .

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Lint Helm
        run: helm lint ./todoapp/

      - name: Template Helm
        run: helm template todoapp ./todoapp/ -f ./todoapp/values.yaml

      - name: Package Helm
        run: helm package ./todoapp

      - name: Upload helm package artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-package
          path: ./*.tgz

  deploy-development:
    needs: [docker-ci, helm-ci]
    runs-on: ubuntu-latest
    steps:
      - name: Download helm package artifact
        uses: actions/download-artifact@v4
        with:
          name: helm-package
          path: .

      - name: Set up kind
        run: |
          kind create cluster --name kind-development
          kubectl cluster-info --context kind-kind-development

      - name: Port forward API server
        run: kubectl port-forward --namespace kube-system pod/kube-apiserver-kind-control-plane 8080:443 &

      - name: Set up KUBECONFIG
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
        shell: bash

      - name: Deploy Helm chart
        env:
          KUBECONFIG: $HOME/.kube/config
        run: helm upgrade --install todoapp ./*.tgz --atomic --kubeconfig $HOME/.kube/config --kube-apiserver https://localhost:8080

  deploy-staging:
    needs: [docker-ci, helm-ci]
    runs-on: ubuntu-latest
    steps:
      - name: Download helm package artifact
        uses: actions/download-artifact@v4
        with:
          name: helm-package
          path: .

      - name: Set up kind
        run: |
          kind create cluster --name kind-staging
          kubectl cluster-info --context kind-kind-staging

      - name: Port forward API server
        run: kubectl port-forward --namespace kube-system pod/kube-apiserver-kind-control-plane 8080:443 &
      
      - name: Set up KUBECONFIG
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
        shell: bash

      - name: Deploy Helm chart
        env:
          KUBECONFIG: $HOME/.kube/config
        run: helm upgrade --install todoapp ./*.tgz --atomic --kubeconfig $HOME/.kube/config --kube-apiserver https://localhost:8080

    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
